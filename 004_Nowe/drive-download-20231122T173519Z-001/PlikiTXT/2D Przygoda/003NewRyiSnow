Sprite and animation


//////////////////////////////////////////////////
packed entity

public class Entity {
  public int x, y;
  public int speed;
  
  public BufferedImage up1, up2, down1, down2, left1, left2, right1, right2;
  public String direction;
  public int spriteCounter = 0;
  public int spriteNum = 0;

}


//////////////////////////////////////////////////

public class Player extends Entity{

 GamePane gp;
 KeyHandler keyH;
 
 public Player(Game gp, KeyHandler keH){
 
  this.gp = gp;
  this.keyH = keyH;
  
   setDefaultValues();
   getPlayerImage();
  
 }
 
 public void getPlayerImage(){
   
   try{
   
      up1 = ImageIO.read(getClass().getResourceAsStream("/player/boy_up_1.png"));
      up2 = ImageIO.read(getClass().getResourceAsStream("/player/boy_up_2.png"));
      down1 = ImageIO.read(getClass().getResourceAsStream("/player/boy_down_1.png"));
      down2 = ImageIO.read(getClass().getResourceAsStream("/player/boy_down_2.png"));
      left1 = ImageIO.read(getClass().getResourceAsStream("/player/boy_uleft_1.png"));
      left2 = ImageIO.read(getClass().getResourceAsStream("/player/boy_left_2.png"));
      right1 = ImageIO.read(getClass().getResourceAsStream("/player/boy_right_1.png"));
      right2 = ImageIO.read(getClass().getResourceAsStream("/player/boy_right_2.png"));
   
   } catch(IOException e) {
      e.printStackTrace();
   }
 }
 
 public void setDefaultValues(){
  x = 100;
  y = 100;
  speed = 4;
  direction = "down";
 }
 
 public void draw(Graphics2D g2){
  // g2.setColor(Color.White);
  // g2.filleRect(x, y, gp.tileSize, gp.tileSize);
  
     BufferedImage image = null;
     
     switch(direction){
     case "up":
       if(spriteNum == 1){
         image = up1;
       }
       if(spriteNum == 2){
         image = up2;
       }
       break;
     case "down":
       if(spriteNum == 1){
        image = down1;
       }
       if(spriteNum == 2){
        image = down2;
       }
       break;
     case "left":
           if(spriteNum == 1){
        image = left1;
       }
       if(spriteNum == 2){
        image = left2;
       }
       break;
     case "right":
         if(spriteNum == 1){
        image = right1;
       }
       if(spriteNum == 2){
        image = right2;
       }
       break;
     }
     g2.drawImage(image, x, y, gp.tileSize, gp.tileSize, null);
 }
 
 public void update(){
    
    if(keyH.upPressed == true || keyH.downPressed == true || keyH.leftPressed == true || keyH.rightPressed == true)  {
    
     if(keyH.upPressed == true){
      direction = "up";
      y -= speed;
    } else if (keyH.downPressed == true){
    direction = "down";
      y += speed;
    } else if (keyH.leftPressed == true){
    direction = "left";
      x -= speed;
    } else if (keyH.rightPressed == true){
    direction = "right";
      x += speed;
    }
    
    spriteCounter++;
    if(spriteCounter > 12){
      if(spriteNum == 1){
        spriteNum == 2;
       } 
    } else if(spriteNum == 2){
       spriteNum =1;
       }
        spirteCounter = 0;
 }
    
       }

}

///////////////////////////////////////////

public class GamePanel extends JPanel implements Runnable {
// screen settings

final int orginalTileSize = 16; // 16x16 tile
final int scale = 3;

public final int tileSize = orginalTileSize * scale; // 48x48
final int maxScreenCol = 16;
final int maxScreenRow = 12;
final int screenWidth = tileSize * maxScreenCol; // 768
final int sceenHeight = tileSize * maxScreenRow; // 576

// FPS
 int FPS = 60;
 
 KeyHandler keyH =  new KeyHandler();
 Thread gameThread;
 Player player = new Player(this, keyH);
 
 // set players default position
 int playerX = 100;
 int playerY = 100;
 int plaerSpeed = 4;
 
 public GamePanel(){
  this.setPreferredSize(new Dimension(screenWidth, screenHeight));
  this.setBackgtound(Color.Black);
  this.setDoubleBuffered(true);
  this.addKeyListener(keyH);
  this.setFocusable(true);
 }
 
 public void startGameThread(){
  gameThread =  new Thread(this);
  gameThread.start();
 }
 
 public void run(){
   double drawInternal = 1000000000/FPS;
   double delta = 0;
   long lasTime =  System.nanoTime();
   long currentTime;
   long timer = 0;
   int drawCount = 0;
   
   while(gameThread != null){
   
    currentTime = System.nanoTime();
    
    delta += (currentTime - lastTime) / drawInterval;
    timer += (currentTime - lastTime);
    lastTime = currentTime;
      
      if(delta >= 1 {
       update();
       repaint();
       delta--;
       drawCount++;
      }
      if(timer >= 1000000000) {
      System.out.println("FPS:" + drawCount);
      drawCount = 0;
      timer = 0;
      }
    
   }
  }
  
  public void update() { 
   player.update();
  }
  
  public void paintComponent(Graphics g){
   super.paintComponent(g);
   
   Graphics2D g2 = (Grapics2D)g;
    
    plyer.draw(g2);
    
   g2.dispose();
  }

}
